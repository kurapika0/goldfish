<TMU|<tuple|1.0.5|1.2.9.7>>

<style|<tuple|generic|chinese|goldfish>>

<\body>
  <\session|goldfish|default>
    <\output>
      Goldfish Scheme 17.11.0 Community Edition by LiiiLabs

      implemented on S7 Scheme (11.2, 22-Nov-2024)
    </output>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (g_chdir "D:/texstudio/document/goldfish-range-map/goldfish")
    <|unfolded-io>
      <goldfish-result|#t>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (import (liii check) (liii range))
    <|unfolded-io>
      <goldfish-result|(rootlet)>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (check-set-mode! 'report-failed)
    <|unfolded-io>
      <goldfish-result|10>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (range :inclusive 1 3)
    <|unfolded-io>
      <goldfish-result|{gensym}-77>
    </unfolded-io>

    <\input>
      \<gtr\>\ 
    <|input>
      \;
    </input>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (check-false ((range :inclusive 1 3) :empty?))
    <|unfolded-io>
      <goldfish-result|7>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (check-false ((range :inclusive 3 1) :empty?))
    <|unfolded-io>
      \;

      ((range :inclusive 3 1) :empty?) =\<gtr\> #t ; *** failed ***

      ; expected result: #f

      <goldfish-result|((((range :inclusive 3 1) :empty?) #t #f) (((range :inclusive 3 1) :empty?) #t #f))>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (check-false ((range :inclusive 1 3 0) :empty?))
    <|unfolded-io>
      <goldfish-result|8>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (let1 r (range :inclusive 1 2)

      \ \ (check (r 'start) =\<gtr\> 1)

      \ \ (check (r 'end) =\<gtr\> 2)

      \ \ (check (r 'step) =\<gtr\> 1)

      \ \ (check-true (r 'inclusive?)))
    <|unfolded-io>
      <goldfish-result|17>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (let1 r (range :inclusive 1 2)

      \ \ \ \ \ (check (r 'next) =\<gtr\> 2))
    <|unfolded-io>
      <\errput>
        value-error

        (range "No such field: " next)
      </errput>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (symbol-\<gtr\>string 'HelloWorld) ; =\> "HelloWorld"\ 
    <|unfolded-io>
      <goldfish-result|"HelloWorld">
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (map abs (list -10 2.5 -11.6 17))
    <|unfolded-io>
      <goldfish-result|(10 2.5 11.6 17)>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (map (lambda(x)(* x x)) (list -10 2.5 -11.6 17))
    <|unfolded-io>
      <goldfish-result|(100 6.25 134.56 289)>
    </unfolded-io>

    <\input>
      \<gtr\>\ 
    <|input>
      \;
    </input>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (define start -3)
    <|unfolded-io>
      <goldfish-result|-3>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (define current start)
    <|unfolded-io>
      <goldfish-result|-3>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (define step 1)
    <|unfolded-io>
      <goldfish-result|1>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (define end -1)
    <|unfolded-io>
      <goldfish-result|-1>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (define map-func abs)
    <|unfolded-io>
      <goldfish-result|abs>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (map-func -3)
    <|unfolded-io>
      <goldfish-result|3>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (define r (range :inclusive -3 -1))
    <|unfolded-io>
      <goldfish-result|r>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (display "empty range\\n")
    <|unfolded-io>
      empty range

      <goldfish-result|"empty range˙">
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (r :empty?)
    <|unfolded-io>
      <goldfish-result|#f>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (define (print-range)\ 

      \ \ (define current start)

      \ \ (let loop ((current start))\ 

      \ \ \ \ \ \ \ (cond\ 

      \ \ \ \ \ \ \ \ \ ((r :empty?) (display "empty range\\n"))\ 

      \ \ \ \ \ \ \ \ \ ((or (and (\<gtr\> step 0) (\<gtr\> current end))\ 

      \ \ \ \ \ \ \ \ \ \ \ \ \ \ (and (\<less\> step 0) (\<less\> current end)))\ 

      \ \ \ \ \ \ \ \ \ \ (newline))\ 

      \ \ \ \ \ \ \ \ \ (else\ 

      \ \ \ \ \ \ \ \ \ \ \ (display (map-func current))\ 

      \ \ \ \ \ \ \ \ \ \ \ (display " ")\ 

      \ \ \ \ \ \ \ \ \ \ \ (loop (+ current step)))))

      \ \ )
    <|unfolded-io>
      <goldfish-result|print-range>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (print-range)
    <|unfolded-io>
      3 2 1\ 

      <goldfish-result|#\\newline>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      current
    <|unfolded-io>
      <goldfish-result|-3>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (define (%empty?)

      \ \ (or (and (\<gtr\> start end) (\<gtr\> step 0))

      \ \ \ \ \ \ (and (\<less\> start end) (\<less\> step 0))

      \ \ \ \ \ \ (and (= start end) (not inclusive?))))
    <|unfolded-io>
      <goldfish-result|%empty?>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (%empty?)
    <|unfolded-io>
      <goldfish-result|#f>
    </unfolded-io>

    <\folded-io>
      \<gtr\>\ 
    <|folded-io>
      (define a 4);;
    <|folded-io>
      <goldfish-result|4>
    </folded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (define b 6)
    <|unfolded-io>
      <goldfish-result|6>
    </unfolded-io>

    <\unfolded-io|Scheme] >
      <\scm-code>
        (cond ((= a 4) 6)

        \ \ \ \ \ \ ((= b 4) (+ 6 7 a))

        \ \ \ \ \ \ (else 25))
      </scm-code>
    <|unfolded-io>
      <errput|unbound variable a in (= a 4)>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (abs -9)
    <|unfolded-io>
      <goldfish-result|9>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (let loop ((x 0))

      \ \ \ \ \ (if (\<less\> x 6)\ 

      \ \ \ \ \ \ \ \ \ (loop (+ x 1))\ 

      \ \ \ \ \ \ \ \ \ x)

      \ )
    <|unfolded-io>
      <goldfish-result|6>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (define (loop x)\ 

      \ \ (if (\<less\> x 5) (loop (+ x 1)) x))\ 
    <|unfolded-io>
      <\goldfish-result>
        loop
      </goldfish-result>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (loop 0)
    <|unfolded-io>
      <goldfish-result|5>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (define (test1 x)

      (if (\<less\> x 0) \ 

      \ \ \ \ (- x)

      \ \ \ \ x)

      )
    <|unfolded-io>
      <goldfish-result|test1>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (display "hello\\n")
    <|unfolded-io>
      hello

      <goldfish-result|"hello˙">
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (newline)
    <|unfolded-io>
      \;

      <goldfish-result|#\\newline>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (procedure? map-func)
    <|unfolded-io>
      <goldfish-result|#t>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (lambda (x) (x))
    <|unfolded-io>
      <goldfish-result|#\<lambda (x)\>>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (define test (lambda (x) (* x x)))
    <|unfolded-io>
      <goldfish-result|test>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (test 5)
    <|unfolded-io>
      <goldfish-result|25>
    </unfolded-io>

    <\input>
      \<gtr\>\ 
    <|input>
      \;
    </input>
  </session>
</body>

<\initial>
  <\collection>
    <associate|page-medium|paper>
    <associate|page-screen-margin|false>
  </collection>
</initial>
