<TMU|<tuple|1.0.5|1.2.9.7>>

<style|<tuple|generic|chinese>>

<\body>
  <\scm-code>
    ;;(define (map proc items)

    \ \ ;;(if (null? items)

    \ \ \ \ \ \ ;;#nil

    \ \ \ \ \ \ ;;(cons (proc (car items))

    \ \ \ \ \ \ \ \ \ \ \ \ ;;(map proc (cdr items)))))
  </scm-code>

  <\session|scheme|default>
    <\unfolded-io|Scheme] >
      (map abs (list -10 2.5 -11.6 17))
    <|unfolded-io>
      (10 2.5 11.6 17)
    </unfolded-io>

    <\unfolded-io|Scheme] >
      (map (lambda (x) (* x x))

      \ \ \ \ \ (list 1 2 3 4))
    <|unfolded-io>
      (1 4 9 16)
    </unfolded-io>

    <\unfolded-io|Scheme] >
      (define* (person (name "Bob") (age 21))

      \ \ (string-append name ": " (number-\<gtr\>string age)))

      \;

      (person :name "Alice" :age 3)
    <|unfolded-io>
      person
    </unfolded-io>

    <\unfolded-io|Scheme] >
      (define-library (liii range)

      (import (liii lang))

      (export range)

      (begin

      \;

      (define-case-class range

      \ \ ((start integer?) (end integer?) (step integer?) (inclusive? boolean?))

      \;

      (define* (@inclusive start end (step 1))

      \ \ (range start end step #t))

      \;

      (define (%empty?)

      \ \ (or (and (\<gtr\> start end) (\<gtr\> step 0))

      \ \ \ \ \ \ (and (\<less\> start end) (\<less\> step 0))

      \ \ \ \ \ \ (and (= start end) (not inclusive?))))

      \;

      ) ; define-case-cass

      ) ; begin

      ) ; define-library

      \;
    <|unfolded-io>
      <errput|load: No such file or directory "liii/lang.scm">
    </unfolded-io>

    <\input|Scheme] >
      \;
    </input>
  </session>
</body>

<\initial>
  <\collection>
    <associate|page-medium|paper>
    <associate|page-screen-margin|false>
  </collection>
</initial>
